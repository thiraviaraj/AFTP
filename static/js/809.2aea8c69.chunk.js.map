{"version":3,"file":"static/js/809.2aea8c69.chunk.js","mappings":"yMAKaA,EAAkDC,EAAAA,G,UCJ/D,EAAsB,qBAAtB,EAAmD,uBAAnD,EAAmF,wBAAnF,EAAqH,yBAArH,EAA4J,mD,SCW7I,SAASC,IACtB,IAAMC,EAAQH,EAAeI,EAAAA,IACvBC,GFV4BC,EAAAA,EAAAA,MEWlC,GAA8CC,EAAAA,EAAAA,UAAS,KAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KACMC,EAAiBC,OAAOH,IAAoB,EAClD,OACE,4BACE,iBAAKI,UAAWC,EAAhB,WACE,mBACED,UAAWC,EACX,aAAW,kBACXC,QAAS,kBAAMT,GAASU,EAAAA,EAAAA,QAH1B,gBAOA,iBAAMH,UAAWC,EAAjB,SAAgCV,KAChC,mBACES,UAAWC,EACX,aAAW,kBACXC,QAAS,kBAAMT,GAASW,EAAAA,EAAAA,QAH1B,mBAQF,iBAAKJ,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACX,aAAW,uBACXI,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAmBU,EAAEC,OAAOH,WAE/C,mBACEL,UAAWC,EACXC,QAAS,kBAAMT,GAASgB,EAAAA,EAAAA,IAAkBX,KAF5C,yBAMA,mBACEE,UAAWC,EACXC,QAAS,kBAAMT,GAASiB,EAAAA,EAAAA,IAAeZ,KAFzC,wBAMA,mBACEE,UAAWC,EACXC,QAAS,kBAAMT,GAASkB,EAAAA,EAAAA,IAAeb,KAFzC","sources":["hooks/index.tsx","webpack://freshers-training/./src/views/Counter/Counter.module.css?bbc5","views/Counter/index.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from '../store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"Counter_row__XTCUf\",\"value\":\"Counter_value__Xt3eN\",\"button\":\"Counter_button__CMVVj\",\"textbox\":\"Counter_textbox__HCAor\",\"asyncButton\":\"Counter_asyncButton__RrlKD Counter_button__CMVVj\"};","import { useState } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../../hooks';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  incrementIfOdd,\r\n  selectCount,\r\n} from './Counter.reducer';\r\nimport styles from './Counter.module.css';\r\n\r\nexport default function Counter() {\r\n  const count = useAppSelector(selectCount);\r\n  const dispatch = useAppDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n  const incrementValue = Number(incrementAmount) || 0;\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={(e) => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(incrementValue))}\r\n        >\r\n          Add Async\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\r\n        >\r\n          Add If Odd\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":["useAppSelector","useSelector","Counter","count","selectCount","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","onClick","decrement","increment","value","onChange","e","target","incrementByAmount","incrementAsync","incrementIfOdd"],"sourceRoot":""}